{
	"info": {
		"_postman_id": "frank-thomas-collection-001",
		"name": "FDD-2120 ACK: Step 1 - Trigger (Frank Thomas)",
		"description": "Postman collection for Frank Thomas Azure Function App - Transfer Order Acknowledgment service. Receives successful transfer order notifications and triggers ACK processing flow.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Acknowledgments",
			"item": [
				{
					"name": "Create Acknowledgment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferOrderNumber\": \"TO-12345\",\n  \"status\": \"Received\",\n  \"timestamp\": \"2025-10-14T00:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/acknowledgments?code={{functionKey}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "acknowledgments"],
							"query": [
								{
									"key": "code",
									"value": "{{functionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Creates a new transfer order acknowledgment"
					},
					"response": []
				},
				{
					"name": "Get Acknowledgment",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/acknowledgments/:id?code={{functionKey}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "acknowledgments", ":id"],
							"query": [
								{
									"key": "code",
									"value": "{{functionKey}}",
									"description": "Function authorization key"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "ACK-12345",
									"description": "Acknowledgment ID"
								}
							]
						},
						"description": "Retrieves an acknowledgment by ID"
					},
					"response": []
				}
			],
			"description": "Transfer Order Acknowledgment endpoints"
		},
		{
			"name": "Diagnostics",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/health?code={{functionKey}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "health"],
							"query": [
								{
									"key": "code",
									"value": "{{functionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Health check endpoint - returns HTTP 200 if the function app is running"
					},
					"response": []
				},
				{
					"name": "Heartbeat",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/diagnostics/heartbeat?code={{functionKey}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "diagnostics", "heartbeat"],
							"query": [
								{
									"key": "code",
									"value": "{{functionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Health check endpoint - returns HTTP 200 if the function app is running"
					},
					"response": []
				},
				{
					"name": "Version (Full JSON)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/diagnostics/version?code={{functionKey}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "diagnostics", "version"],
							"query": [
								{
									"key": "code",
									"value": "{{functionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Returns comprehensive version information as JSON"
					},
					"response": []
				},
				{
					"name": "Version (Simple String)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/diagnostics/version?code={{functionKey}}&format=simple",
							"host": ["{{baseUrl}}"],
							"path": ["api", "diagnostics", "version"],
							"query": [
								{
									"key": "code",
									"value": "{{functionKey}}",
									"description": "Function authorization key"
								},
								{
									"key": "format",
									"value": "simple",
									"description": "Returns simple string format"
								}
							]
						},
						"description": "Returns the application name and version as a simple string (e.g., 'frank-thomas-dev v1.0.0')"
					},
					"response": []
				},
				{
					"name": "API Name",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/diagnostics/apiName?code={{functionKey}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "diagnostics", "apiName"],
							"query": [
								{
									"key": "code",
									"value": "{{functionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Returns the application name"
					},
					"response": []
				},
				{
					"name": "Exception Test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/diagnostics/exceptionTest?code={{functionKey}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "diagnostics", "exceptionTest"],
							"query": [
								{
									"key": "code",
									"value": "{{functionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Triggers a test exception to validate exception handling and logging"
					},
					"response": []
				},
				{
					"name": "Custom HTTP Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/diagnostics/customHttpStatus/418/I'm a teapot?code={{functionKey}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "diagnostics", "customHttpStatus", "418", "I'm a teapot"],
							"query": [
								{
									"key": "code",
									"value": "{{functionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Returns a custom HTTP status code with a custom message. Format: /customHttpStatus/{statusCode}/{message}"
					},
					"response": []
				},
				{
					"name": "Log Test",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Test log message from Postman\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/diagnostics/logTest?code={{functionKey}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "diagnostics", "logTest"],
							"query": [
								{
									"key": "code",
									"value": "{{functionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Tests logging functionality. Send a POST request with JSON body containing a message property"
					},
					"response": []
				},
				{
					"name": "Service Bus Connectivity Test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/diagnostics/serviceBusConnectivityTest?code={{functionKey}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "diagnostics", "serviceBusConnectivityTest"],
							"query": [
								{
									"key": "code",
									"value": "{{functionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Tests connectivity to the Tiger Transit Service Bus"
					},
					"response": []
				},
				{
					"name": "Cosmos DB Connectivity Test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/diagnostics/cosmosDbConnectivityTest?code={{functionKey}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "diagnostics", "cosmosDbConnectivityTest"],
							"query": [
								{
									"key": "code",
									"value": "{{functionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Tests connectivity to Jordan Hare Stadium and Forgetful Jones Cosmos DB databases"
					},
					"response": []
				}
			],
			"description": "Diagnostic and health check endpoints"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [""]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [""]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://func-wareagle-frank-thomas-v1-0-eus-dev.azurewebsites.net",
			"type": "string"
		},
		{
			"key": "functionKey",
			"value": "",
			"type": "string"
		}
	]
}
