{
	"info": {
		"_postman_id": "tre-mason-collection-001",
		"name": "FDD-2119 PO Receipts Step 3: Integration (Tre Mason)",
		"description": "Postman collection for Tre Mason Azure Function App - Integration configuration service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Diagnostics",
			"item": [
				{
					"name": "Heartbeat",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{treMasonBaseUrl}}/api/diagnostics/heartbeat?code={{treMasonFunctionKey}}",
							"host": ["{{treMasonBaseUrl}}"],
							"path": ["api", "diagnostics", "heartbeat"],
							"query": [
								{
									"key": "code",
									"value": "{{treMasonFunctionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Health check endpoint - returns HTTP 200 if the function app is running"
					},
					"response": []
				},
				{
					"name": "Version",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{treMasonBaseUrl}}/api/diagnostics/version?code={{treMasonFunctionKey}}",
							"host": ["{{treMasonBaseUrl}}"],
							"path": ["api", "diagnostics", "version"],
							"query": [
								{
									"key": "code",
									"value": "{{treMasonFunctionKey}}",
									"description": "Function authorization key"
								},
								{
									"key": "includeApiName",
									"value": "false",
									"description": "Set to true to include API name in response",
									"disabled": true
								}
							]
						},
						"description": "Returns the application version. Add query param includeApiName=true to include the API name"
					},
					"response": []
				},
				{
					"name": "API Name",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{treMasonBaseUrl}}/api/diagnostics/apiName?code={{treMasonFunctionKey}}",
							"host": ["{{treMasonBaseUrl}}"],
							"path": ["api", "diagnostics", "apiName"],
							"query": [
								{
									"key": "code",
									"value": "{{treMasonFunctionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Returns the application name"
					},
					"response": []
				},
				{
					"name": "Exception Test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{treMasonBaseUrl}}/api/diagnostics/exceptionTest?code={{treMasonFunctionKey}}",
							"host": ["{{treMasonBaseUrl}}"],
							"path": ["api", "diagnostics", "exceptionTest"],
							"query": [
								{
									"key": "code",
									"value": "{{treMasonFunctionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Triggers a test exception to validate exception handling and logging"
					},
					"response": []
				},
				{
					"name": "Custom HTTP Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{treMasonBaseUrl}}/api/diagnostics/customHttpStatus/418/I'm a teapot?code={{treMasonFunctionKey}}",
							"host": ["{{treMasonBaseUrl}}"],
							"path": ["api", "diagnostics", "customHttpStatus", "418", "I'm a teapot"],
							"query": [
								{
									"key": "code",
									"value": "{{treMasonFunctionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Returns a custom HTTP status code with a custom message. Format: /customHttpStatus/{statusCode}/{message}"
					},
					"response": []
				},
				{
					"name": "Log Test",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Test log message from Postman\"\n}"
						},
						"url": {
							"raw": "{{treMasonBaseUrl}}/api/diagnostics/logTest?code={{treMasonFunctionKey}}",
							"host": ["{{treMasonBaseUrl}}"],
							"path": ["api", "diagnostics", "logTest"],
							"query": [
								{
									"key": "code",
									"value": "{{treMasonFunctionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Tests logging functionality. Send a POST request with JSON body containing a message property"
					},
					"response": []
				},
				{
					"name": "Service Bus Connectivity Test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{treMasonBaseUrl}}/api/diagnostics/serviceBusConnectivityTest?code={{treMasonFunctionKey}}",
							"host": ["{{treMasonBaseUrl}}"],
							"path": ["api", "diagnostics", "serviceBusConnectivityTest"],
							"query": [
								{
									"key": "code",
									"value": "{{treMasonFunctionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Tests connectivity to Tiger Transit Service Bus topics (ready-for-integration, success, failed)"
					},
					"response": []
				},
				{
					"name": "Cosmos DB Connectivity Test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{treMasonBaseUrl}}/api/diagnostics/cosmosDbConnectivityTest?code={{treMasonFunctionKey}}",
							"host": ["{{treMasonBaseUrl}}"],
							"path": ["api", "diagnostics", "cosmosDbConnectivityTest"],
							"query": [
								{
									"key": "code",
									"value": "{{treMasonFunctionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Tests connectivity to Jordan Hare Stadium Cosmos DB (Heisman Legends and Samford Hall containers)"
					},
					"response": []
				},
				{
					"name": "Segra API Connectivity Test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{treMasonBaseUrl}}/api/diagnostics/segraApiConnectivityTest?code={{treMasonFunctionKey}}",
							"host": ["{{treMasonBaseUrl}}"],
							"path": ["api", "diagnostics", "segraApiConnectivityTest"],
							"query": [
								{
									"key": "code",
									"value": "{{treMasonFunctionKey}}",
									"description": "Function authorization key"
								}
							]
						},
						"description": "Tests connectivity to Segra API by calling their heartbeat endpoint"
					},
					"response": []
				}
			],
			"description": "Diagnostic and health check endpoints for monitoring and testing the Tre Mason function app"
		},
		{
			"name": "Segra API",
			"item": [
				{
					"name": "Check Outbound IP (Proxy Test)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonResponse = pm.response.json();",
									"if (jsonResponse.ip) {",
									"    console.log('Your outbound IP:', jsonResponse.ip);",
									"    pm.environment.set('detected_ip', jsonResponse.ip);",
									"    ",
									"    // Check against expected IPs",
									"    const env = pm.environment.get('environment');",
									"    const expectedIPs = {",
									"        'dev': '68.154.17.83',",
									"        'local': '68.154.17.83',",
									"        'uat': '172.200.75.117',",
									"        'prd': '13.68.107.227'",
									"    };",
									"    ",
									"    if (expectedIPs[env] && jsonResponse.ip === expectedIPs[env]) {",
									"        console.log('✓ Proxy is working correctly! IP matches expected:', expectedIPs[env]);",
									"    } else if (expectedIPs[env]) {",
									"        console.log('✗ WARNING: IP does not match expected!');",
									"        console.log('  Expected:', expectedIPs[env]);",
									"        console.log('  Detected:', jsonResponse.ip);",
									"        console.log('  → Check proxy is running and Postman proxy settings');",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.ipify.org?format=json",
							"protocol": "https",
							"host": ["api", "ipify", "org"],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						},
						"description": "Returns your outbound IP address to verify proxy is working. If proxy is configured correctly, this should return the whitelisted IP for the environment (DEV: 68.154.17.83, UAT: 172.200.75.117, PRD: 13.68.107.227)."
					},
					"response": []
				},
				{
					"name": "Get Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const jsonResponse = pm.response.json();",
									"if (jsonResponse.access_token) {",
									"    pm.environment.set('segra_bearer_token', jsonResponse.access_token);",
									"    console.log('Access token saved to environment');",
									"}",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains access_token', () => {",
									"    pm.expect(jsonResponse).to.have.property('access_token');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{segra_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{segra_client_secret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{segra_token_url}}",
							"host": ["{{segra_token_url}}"]
						},
						"description": "Get OAuth 2.0 access token using client credentials flow. Requires proxy to be running."
					},
					"response": []
				},
				{
					"name": "Heartbeat",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response time is less than 2000ms', () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{segra_bearer_token}}",
								"type": "text",
								"description": "OAuth 2.0 Bearer token"
							},
							{
								"key": "client_id",
								"value": "{{segra_client_id}}",
								"type": "text",
								"description": "Client ID in plain text"
							},
							{
								"key": "client_secret",
								"value": "{{segra_client_secret}}",
								"type": "text",
								"description": "Client secret in plain text"
							}
						],
						"url": {
							"raw": "{{segra_api_url}}/api/heartbeat",
							"host": ["{{segra_api_url}}"],
							"path": ["api", "heartbeat"]
						},
						"description": "Check if Segra API is functioning. Requires proxy and THREE headers: Authorization Bearer, client_id, client_secret."
					},
					"response": []
				},
				{
					"name": "Consignment Inventory (PO Receipts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200 or 201', () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{segra_bearer_token}}",
								"type": "text",
								"description": "OAuth 2.0 Bearer token"
							},
							{
								"key": "client_id",
								"value": "{{segra_client_id}}",
								"type": "text",
								"description": "Client ID in plain text"
							},
							{
								"key": "client_secret",
								"value": "{{segra_client_secret}}",
								"type": "text",
								"description": "Client secret in plain text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"RECORDID\": \"{{$randomUUID}}\",\n  \"PurchaseConsignmentLines\": [\n    {\n      \"LineNumber\": 1,\n      \"ItemNumber\": \"I-00000031\",\n      \"ConsignmentReplenishmentQuantity\": 10,\n      \"PurchaseUnitSymbol\": \"ea\",\n      \"ConsignmentReplenishmentOrderLineStatus\": \"OpenOrder\"\n    },\n    {\n      \"LineNumber\": 2,\n      \"ItemNumber\": \"I-00000032\",\n      \"ConsignmentReplenishmentQuantity\": 25,\n      \"PurchaseUnitSymbol\": \"ea\",\n      \"ConsignmentReplenishmentOrderLineStatus\": \"OpenOrder\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{segra_api_url}}/api/consignment",
							"host": ["{{segra_api_url}}"],
							"path": ["api", "consignment"]
						},
						"description": "Create consignment replenishment order (PO receipt). Primary endpoint for Tre Mason integration."
					},
					"response": []
				},
				{
					"name": "Transfer Order Ship",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{segra_bearer_token}}",
								"type": "text"
							},
							{
								"key": "client_id",
								"value": "{{segra_client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{segra_client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"TransferOrderNum\": \"TO-{{$timestamp}}\",\n  \"TransferOrderLines\": [\n    {\n      \"LineNum\": 1,\n      \"Qty\": 25\n    },\n    {\n      \"LineNum\": 2,\n      \"Qty\": 30\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{segra_api_url}}/api/transferOrderShip",
							"host": ["{{segra_api_url}}"],
							"path": ["api", "transferOrderShip"]
						},
						"description": "Ship a transfer order between locations"
					},
					"response": []
				},
				{
					"name": "Transfer Order Acknowledgement",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{segra_bearer_token}}",
								"type": "text"
							},
							{
								"key": "client_id",
								"value": "{{segra_client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{segra_client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"TRANSFERORDERNUMBER\": \"TO-123456\",\n  \"TransferOrderLines\": [\n    {\n      \"LINENUMBER\": 1,\n      \"SEG_EXTERNALORDERNUMBER\": \"EXT-{{$randomInt}}\",\n      \"SEG_EXTERNALLINENUMBER\": 5\n    },\n    {\n      \"LINENUMBER\": 2,\n      \"SEG_EXTERNALORDERNUMBER\": \"EXT-{{$randomInt}}\",\n      \"SEG_EXTERNALLINENUMBER\": 7\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{segra_api_url}}/api/transferOrderAck",
							"host": ["{{segra_api_url}}"],
							"path": ["api", "transferOrderAck"]
						},
						"description": "Acknowledge receipt of a transfer order"
					},
					"response": []
				},
				{
					"name": "Ownership Change",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{segra_bearer_token}}",
								"type": "text"
							},
							{
								"key": "client_id",
								"value": "{{segra_client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{segra_client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ItemNumber\": \"ITEM-{{$randomInt}}\",\n  \"Quantity\": 12,\n  \"ExternalOrderNumber\": \"ORDER-{{$timestamp}}\"\n}"
						},
						"url": {
							"raw": "{{segra_api_url}}/api/ownershipChange",
							"host": ["{{segra_api_url}}"],
							"path": ["api", "ownershipChange"]
						},
						"description": "Change ownership of inventory items between entities"
					},
					"response": []
				}
			],
			"description": "Segra 3PL Experience API endpoints. IMPORTANT: Requires proxy running and THREE headers per request: Authorization Bearer token, client_id, and client_secret."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-populate Bearer token if not set",
					"if (!pm.environment.get('segra_bearer_token') && pm.environment.get('segra_token_url')) {",
					"    console.log('Getting new OAuth token...');",
					"    ",
					"    const tokenUrl = pm.environment.get('segra_token_url');",
					"    const clientId = pm.environment.get('segra_client_id');",
					"    const clientSecret = pm.environment.get('segra_client_secret');",
					"    ",
					"    if (tokenUrl && clientId && clientSecret) {",
					"        const tokenRequest = {",
					"            url: tokenUrl,",
					"            method: 'POST',",
					"            header: { 'Content-Type': 'application/x-www-form-urlencoded' },",
					"            body: {",
					"                mode: 'urlencoded',",
					"                urlencoded: [",
					"                    { key: 'grant_type', value: 'client_credentials' },",
					"                    { key: 'client_id', value: clientId },",
					"                    { key: 'client_secret', value: clientSecret }",
					"                ]",
					"            }",
					"        };",
					"        ",
					"        pm.sendRequest(tokenRequest, (err, response) => {",
					"            if (!err && response.json().access_token) {",
					"                pm.environment.set('segra_bearer_token', response.json().access_token);",
					"                console.log('Token obtained successfully');",
					"            }",
					"        });",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Log response details",
					"console.log('Response Status:', pm.response.code);",
					"console.log('Response Time:', pm.response.responseTime + 'ms');",
					"",
					"// Check for 401 and clear token if expired",
					"if (pm.response.code === 401) {",
					"    console.log('Token expired, clearing...');",
					"    pm.environment.unset('segra_bearer_token');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "treMasonBaseUrl",
			"value": "https://func-tremason-dev.azurewebsites.net",
			"type": "string"
		},
		{
			"key": "treMasonFunctionKey",
			"value": "",
			"type": "string"
		}
	]
}
